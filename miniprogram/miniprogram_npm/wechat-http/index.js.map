{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createHttp = exports.default = void 0;\nfunction createHttp(config = { showLoading: true }) {\n    // 记录 loading 的状态\n    const loadingQueue = [];\n    /**\n     * 封装 wx.request API\n     */\n    const http = (options) => {\n        // 处理基础路径\n        if (!options.url.startsWith('http') && http.baseURL) {\n            options.url = http.baseURL + options.url;\n        }\n        // 调用拦截器处理请求数据\n        options = http.intercept.request(options);\n        // 记录请求开始的次量\n        loadingQueue.push('loading');\n        // 是否显示加载 loading\n        if (config.showLoading && loadingQueue.length)\n            wx.showLoading(http.loading);\n        // 包装 Promise 对象\n        return new Promise((resolve, reject) => {\n            // 调用小程序 api\n            wx.request(Object.assign(Object.assign({}, options), { success: (result) => {\n                    // 调用拦截器处理响应数据\n                    resolve(http.intercept.response(Object.assign(Object.assign({}, result), { config: options })));\n                }, fail: reject, complete: () => {\n                    // 记录结束的请求数量\n                    loadingQueue.pop();\n                    // 关闭加载提示框\n                    if (!loadingQueue.length)\n                        wx.hideLoading();\n                } }));\n        });\n    };\n    // get 方法请求\n    http.get = (url, data) => {\n        return http({ url, data, method: 'GET' });\n    };\n    // post 方法请求\n    http.post = (url, data) => {\n        return http({ url, data, method: 'POST' });\n    };\n    // put 方法请求\n    http.put = (url, data) => {\n        return http({ url, data, method: 'PUT' });\n    };\n    // delete 方法请求\n    http.delete = (url, data) => {\n        return http({ url, data, method: 'DELETE' });\n    };\n    /**\n     * 默认loading配置\n     */\n    http.loading = {\n        title: '正在加载...',\n        mask: true,\n    };\n    /**\n     * 默认拦截器（什么也没做）\n     */\n    http.intercept = {\n        request: (options) => options,\n        response: (result) => result,\n    };\n    return http;\n}\nexports.createHttp = createHttp;\nconst http = createHttp();\nexports.default = http;\n"]}